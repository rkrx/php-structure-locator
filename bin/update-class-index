#!/usr/bin/env php
<?php

namespace PhpLocate;

use PhpLocate\Internal\FileSystem\Finder;
use PhpLocate\Internal\FileSystem\Tools;
use Psr\Log\AbstractLogger;
use ReturnTypeWillChange;
use Stringable;

/** @var string|null $composerAutoloadPath */
$composerAutoloadPath = $GLOBALS['_composer_autoload_path'] ?? null;

$composerAutoloadPath ??= __DIR__ . '/../vendor/autoload.php';

if(!file_exists($composerAutoloadPath)) {
	$composerAutoloadPath = __DIR__ . '/../../../autoload.php';
}

require $composerAutoloadPath;

/** @var string[] $argv */
$argv = $_SERVER['argv'];

$args = array_slice($argv, 1);

$outXml = 'class-index.xml';

$finder = new Finder();

while(count($args) > 0) {
	$command = array_shift($args);
	if($command === '--out' || $command === '-o') {
		$outXml = (string) array_shift($args);
		continue;
	}
	
	if($command === '--include' || $command === '-i') {
		$finder->addInclude((string) array_shift($args));
		continue;
	}
	
	if($command === '--exclude' || $command === '-e') {
		$finder->addExclude((string) array_shift($args));
		continue;
	}
	
	if($command === '--working-directory' || $command === '-w') {
		$finder->setWorkingDirectory((string) array_shift($args));
		continue;
	}
	
	printf("Invalid argument: %s%s", $args[0], PHP_EOL);
	printf("Require either --out, --include or --working-directory%s", PHP_EOL);
	exit;
}

$logger = new class extends AbstractLogger {
	/**
	 * @param mixed $level
	 * @param Stringable|string $message
	 * @param mixed[] $context
	 * @return void
	 */
	#[ReturnTypeWillChange]
	public function log($level, $message, array $context = []): void {
		printf("%s%s", $message, PHP_EOL);
	}
};

$updateIndexService = new UpdateIndexService($logger);
$updateIndexService->updateIndex($outXml, $finder->find());